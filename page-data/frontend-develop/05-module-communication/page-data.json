{
    "componentChunkName": "component---src-templates-docs-js",
    "path": "/frontend-develop/05-module-communication",
    "result": {"data":{"site":{"siteMetadata":{"title":"Shiksha Platform","docsLocation":"https://github.com/shiksha-platform/shiksha-platform.github.io/tree/gatsby-source/content"}},"mdx":{"fields":{"id":"bde10c92-dd2c-51a0-b03d-cda58fdfacd0","title":"Inter Module communication","slug":"/frontend-develop/05-module-communication"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Inter Module communication\",\n  \"metaTitle\": \"Inter Module communication\",\n  \"metaDescription\": \"\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"As a developer, i am developing a module that wants to communicate with other modules. This describes uses for event bus messaging between modules\"), mdx(\"h2\", null, \"EventBus\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@shiksha/common-lib\"), \" provides \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"EventBus\"), \" that is used to communicate and event that happened. Any other module can subscribes to the event channel and act on event that has happened.\"), mdx(\"h2\", null, \"Publish an Event\"), mdx(\"p\", null, \"\\\\\", \" A component A in a module M1 publishes event E\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"\\\\\\\\ -- componentA.js\\nimport {eventBus} from '@shiksha/common-lib';\\n...\\nlet eventData = ...\\neventBus.publish(\\n              \\\"[channel]\\\" , \\n              {\\n                eventType:\\\"[eventtype]\\\", \\n                data: eventData \\n              });\\n...\\n\\n\")), mdx(\"h2\", null, \"Subscribes to an Event\"), mdx(\"p\", null, \"\\\\\", \" A component B in module M2 wants to act on an event that is published to a channel \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"\\\\\\\\ -- componentB.js\\nimport {eventBus} from '@shiksha/common-lib';\\n...\\n\\\\\\\\ grab subscription \\n\\\\\\\\ so that it can be released after component no more wants to listen to the events in the channel\\nconst subscription = eventBus.subscribe(\\\"[channel]\\\", (data, envelop)=>{\\n      console.log(envelop);\\n      if(data.eventType=\\\"[eventtype]\\\"){\\n        // act on event wiith data.\\n        ...\\n      }\\n    });\\n...\\n\\n// unscubscribe when componentB is destroyed/removed\\neventBus.unsubscribe(subscription);\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#eventbus","title":"EventBus"},{"url":"#publish-an-event","title":"Publish an Event"},{"url":"#subscribes-to-an-event","title":"Subscribes to an Event"}]},"parent":{"relativePath":"frontend-develop/05-module-communication.md"},"frontmatter":{"metaTitle":"Inter Module communication","metaDescription":""}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/deployment","title":"Deployment"}}},{"node":{"fields":{"slug":"/architecture","title":"Shiksha Architecture"}}},{"node":{"fields":{"slug":"/frontend-design","title":"Designing Frontend"}}},{"node":{"fields":{"slug":"/frontend-develop","title":"Developing Frontend"}}},{"node":{"fields":{"slug":"/","title":"Landing Page"}}},{"node":{"fields":{"slug":"/introduction","title":"Introduction"}}},{"node":{"fields":{"slug":"/architecture/adapter-interface","title":"Adapter Interfaces"}}},{"node":{"fields":{"slug":"/architecture/backend-design","title":"Backend Design"}}},{"node":{"fields":{"slug":"/architecture/folder-structure","title":"Middleware Folder Structure"}}},{"node":{"fields":{"slug":"/deployment/deployment-backend","title":"Deploying the Backend"}}},{"node":{"fields":{"slug":"/deployment/deployment-prerequisites","title":"Deployment Pre-requisites"}}},{"node":{"fields":{"slug":"/frontend-develop/00-introduction","title":"Introduction"}}},{"node":{"fields":{"slug":"/frontend-develop/01-getting-started","title":"Getting Started"}}},{"node":{"fields":{"slug":"/frontend-develop/02-folder-structure","title":"Folder Structure"}}},{"node":{"fields":{"slug":"/frontend-develop/03-feature-module","title":"Feature Module"}}},{"node":{"fields":{"slug":"/frontend-develop/04-applcation","title":"Host Application"}}},{"node":{"fields":{"slug":"/frontend-develop/05-module-communication","title":"Inter Module communication"}}},{"node":{"fields":{"slug":"/frontend-develop/99-todo","title":"TODO"}}}]}},"pageContext":{"id":"bde10c92-dd2c-51a0-b03d-cda58fdfacd0"}},
    "staticQueryHashes": ["2619113677","3706406642","417421954"]}